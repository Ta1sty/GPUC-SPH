#version 450

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

#define GRID_PCR
#include "spatial_lookup.glsl"

shared SpatialLookupEntry[gl_WorkGroupSize.x * 2] entries;

void load(){
    uint left = gl_LocalInvocationID.x;

    if (left >= constants.size) {
        entries[left] = SpatialLookupEntry(uint(-1),uint(-1));
    } else {
        entries[left] = spatial_lookup[left];
    }

    uint right = left + gl_WorkGroupSize.x;
    if (right >= constants.size) {
        entries[right] = SpatialLookupEntry(uint(-1),uint(-1));
    } else {
        entries[right] = spatial_lookup[right];
    }
}

void store(){
    uint left = gl_LocalInvocationID.x;

    if (left < constants.size) {
        spatial_lookup[left] = entries[left];
    }

    uint right = left + gl_WorkGroupSize.x;
    if (right < constants.size) {
        spatial_lookup[right] = entries[right];
    }
}

void main(){
    uint local_index = gl_LocalInvocationID.x * 2;

    load();

    SpatialLookupEntry left,right;

    for (uint i = 0; i < constants.size; ++i) {

        barrier();

        // swap (0,1);(2,3)...

        left = entries[local_index];
        right = entries[local_index + 1];

        if (left.cellKey > right.cellKey){
            entries[local_index] = right;
            entries[local_index + 1] = left;
        }

        barrier();

        if (local_index == 0) continue;

        // swap (1,2);(3,4)...

        left = entries[local_index - 1];
        right = entries[local_index];

        if (left.cellKey > right.cellKey){
            entries[local_index - 1] = right;
            entries[local_index] = left;
        }
    }

    barrier();

    store();
}