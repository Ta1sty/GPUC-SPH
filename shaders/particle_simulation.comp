#version 450
#include "_defines.glsl"

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0) buffer positionBuffer { VEC_T positions[]; };
layout(binding = 1) buffer velocityBuffer { VEC_T velocities[]; };
layout(binding = 2) buffer densityBuffer { float densities[]; };
layout(binding = 5) buffer velocityOutputBuffer { VEC_T velocitiesOutput[]; };

layout(push_constant) uniform PushStruct {
    float gravity;
    float deltaTime;
    uint numParticles;
    float collisionDampingFactor;
    float spatialRadius;
    float targetDensity;
    float pressureMultiplier;
    float viscosity;
}
constants;

#define GRID_NUM_ELEMENTS constants.numParticles
#define GRID_CELL_SIZE constants.spatialRadius
#define GRID_BINDING_LOOKUP 3
#define GRID_BINDING_INDEX 4
#define COORDINATES_BUFFER_NAME positions
#include "spatial_lookup.glsl"

const float PI = 3.14159265359;
const float particleMass = 1.0;

float viscosityKernel(float radius, float dist) {
    float value = max(0, radius * radius - dist * dist);
    float volume;
#ifdef DEF_2D
    volume = 4 / (PI * pow(radius, 8));
#endif
#ifdef DEF_3D
    volume = 315 / (64 * PI * pow(abs(radius), 9));
#endif
    return value * value * value * volume;
}

float smoothingKernelDerivative(float radius, float dist) {
    if (dist >= radius) return 0.0;
#ifdef DEF_2D
    float scale = 12.0 / (PI * pow(radius, 4));
#endif
#ifdef DEF_3D
    float scale = 15.0 / (pow(radius, 5) * PI);
#endif
    return (dist - radius) * scale;
}

float density2pressure(float density) {
    return constants.pressureMultiplier * (density - constants.targetDensity);
}

float calculateSharedPressure(float density, float neighbourDensity) {
    return (density2pressure(density) + density2pressure(neighbourDensity)) / 2;
}

void addPressureForce(inout VEC_T pressureForce, const VEC_T pos, const float density, const float radius, const float mass, uint neighbourIndex, VEC_T neighbourPosition, float neighbourDistance) {
    VEC_T diff = pos - neighbourPosition;
    float dist = length(diff);
    if (dist >= radius) return;
    VEC_T direction;
    if (dist == 0.0) {
        return;
    } else {
        direction = diff / dist;
    }
    float slope = -smoothingKernelDerivative(radius, dist);
    float sharedPressure = calculateSharedPressure(density, densities[neighbourIndex]);
    pressureForce += sharedPressure * direction * slope * mass / density;
}

void addViscosityForce(inout VEC_T viscosityForce, const VEC_T pos, const VEC_T velocity, const float radius, uint neighbourIndex, VEC_T neighbourPosition, float neighbourDistance) {
    float influence = (particleMass / densities[neighbourIndex]) * viscosityKernel(radius, neighbourDistance);
    viscosityForce += (velocities[neighbourIndex] - velocity) * influence;
}

VEC_T calculatePressureForce(VEC_T pos, const float density, float radius) {
    VEC_T pressureForce = VEC_T(0.0);
    FOREACH_NEIGHBOUR(pos, {
        addPressureForce(pressureForce, pos, density, radius, particleMass, NEIGHBOUR_INDEX, NEIGHBOUR_POSITION, NEIGHBOUR_DISTANCE);
    });
    return pressureForce;
}

VEC_T calculateViscosityForce(VEC_T position, VEC_T velocity, float radius) {
    VEC_T viscosityForce = VEC_T(0.0);
    FOREACH_NEIGHBOUR(position, {
        addViscosityForce(viscosityForce, position, velocity, constants.spatialRadius, NEIGHBOUR_INDEX, NEIGHBOUR_POSITION, NEIGHBOUR_DISTANCE);
    });
    return viscosityForce * constants.viscosity;
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= constants.numParticles) return;

    VEC_T position = positions[index];
    VEC_T velocity = velocities[index];
    float density = densities[index];

    VEC_T pressureForce = calculatePressureForce(position, density, constants.spatialRadius);
    VEC_T pressureAcceleration = pressureForce / density;

    VEC_T viscosityForce = calculateViscosityForce(position, velocity, constants.spatialRadius);

    // Update velocity
    velocity += pressureAcceleration * constants.deltaTime;
    velocity += viscosityForce * constants.deltaTime;
#ifdef DEF_2D
    velocity += VEC_T(0.0, constants.gravity * constants.deltaTime);
#endif
#ifdef DEF_3D
    velocity += VEC_T(0.0, 0.0, -constants.gravity * constants.deltaTime);
#endif

    velocitiesOutput[index] = velocity;
}