#version 450
#include "_defines.glsl"

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0) buffer positionBuffer { VEC_T positions[]; };
layout(binding = 1) buffer velocityBuffer { VEC_T velocities[]; };
layout(binding = 2) buffer densityBuffer { float densities[]; };
layout(binding = 5) buffer velocityOutputBuffer { VEC_T velocitiesOutput[]; };

layout(push_constant) uniform PushStruct {
    float gravity;
    float deltaTime;
    uint numParticles;
    float collisionDampingFactor;
    float spatialRadius;
    float targetDensity;
    float pressureMultiplier;
    float viscosity;
    float boundaryThreshold;
    float boundaryForceStrength;
}
constants;

#define GRID_NUM_ELEMENTS constants.numParticles
#define GRID_CELL_SIZE constants.spatialRadius
#define GRID_BINDING_LOOKUP 3
#define GRID_BINDING_INDEX 4
#define COORDINATES_BUFFER_NAME positions
#include "spatial_lookup.glsl"

const float PI = 3.14159265359;
const float particleMass = 1.0;

float viscosityKernel(float radius, float dist) {
    float value = max(0, radius * radius - dist * dist);
    float volume;
#ifdef DEF_2D
    volume = 4 / (PI * pow(radius, 8));
#endif
#ifdef DEF_3D
    volume = 315 / (64 * PI * pow(abs(radius), 9));
#endif
    return value * value * value * volume;
}

float smoothingKernelDerivative(float radius, float dist) {
    if (dist >= radius) return 0.0;
#ifdef DEF_2D
    float scale = 12.0 / (PI * pow(radius, 4));
#endif
#ifdef DEF_3D
    float scale = 15.0 / (pow(radius, 5) * PI);
#endif
    return (dist - radius) * scale;
}

float density2pressure(float density) {
    return constants.pressureMultiplier * (density - constants.targetDensity);
}

float calculateSharedPressure(float density, float neighbourDensity) {
    return (density2pressure(density) + density2pressure(neighbourDensity)) / 2;
}

void addPressureAndViscosityForces(inout VEC_T pressureForce, inout VEC_T viscosityForce, const VEC_T pos, const VEC_T velocity, const float density, const float radius, const float mass, uint neighbourIndex, VEC_T neighbourPosition, float neighbourDistance) {
    float neighbourDensity = densities[neighbourIndex];

    float influence = (particleMass / neighbourDensity) * viscosityKernel(radius, neighbourDistance);
    viscosityForce += (velocities[neighbourIndex] - velocity) * influence;

    VEC_T diff = pos - neighbourPosition;
    if (neighbourDistance >= radius) return;
    VEC_T direction;
    if (neighbourDistance == 0.0) {
        return;
    } else {
        direction = diff / neighbourDistance;
    }
    float slope = -smoothingKernelDerivative(radius, neighbourDistance);
    float sharedPressure = calculateSharedPressure(density, neighbourDensity);
    pressureForce += sharedPressure * direction * slope * mass / density;
}

VEC_T calculatePressureAndViscosityForces(VEC_T position, VEC_T velocity, float density, float radius) {
    VEC_T viscosityForce = VEC_T(0.0);
    VEC_T pressureForce = VEC_T(0.0);
    FOREACH_NEIGHBOUR(position, {
        addPressureAndViscosityForces(pressureForce, viscosityForce, position, velocity, density, radius, particleMass, NEIGHBOUR_INDEX, NEIGHBOUR_POSITION, NEIGHBOUR_DISTANCE);
    });

    return ((pressureForce / density) + (viscosityForce * constants.viscosity)) * constants.deltaTime;
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= constants.numParticles) return;

    VEC_T position = positions[index];
    VEC_T velocity = velocities[index];
    float density = densities[index];

    velocity += calculatePressureAndViscosityForces(position, velocity, density, constants.spatialRadius);
#ifdef DEF_2D
    velocity += VEC_T(0.0, constants.gravity * constants.deltaTime);
#endif
#ifdef DEF_3D
    velocity += VEC_T(0.0, 0.0, -constants.gravity * constants.deltaTime);
#endif

    // --------------------------------------------------------
    // Compute smooth boundary forces instead of hard bounce.
    float epsilon = constants.boundaryThreshold;      // boundary threshold
    float kBoundary = constants.boundaryForceStrength;// boundary force strength
    VEC_T boundaryForce = VEC_T(0.0);

    // For x dimension.
    if (position.x < epsilon) {
        float penetration = epsilon - position.x;
        boundaryForce.x += kBoundary * penetration * penetration;
    } else if (position.x > 1.0 - epsilon) {
        float penetration = position.x - (1.0 - epsilon);
        boundaryForce.x += -kBoundary * penetration * penetration;
    }
    // For y dimension.
    if (position.y < epsilon) {
        float penetration = epsilon - position.y;
        boundaryForce.y += kBoundary * penetration * penetration;
    } else if (position.y > 1.0 - epsilon) {
        float penetration = position.y - (1.0 - epsilon);
        boundaryForce.y += -kBoundary * penetration * penetration;
    }
#ifdef DEF_3D
    // For z dimension.
    if (position.z < epsilon) {
        float penetration = epsilon - position.z;
        boundaryForce.z += kBoundary * penetration * penetration;
    } else if (position.z > 1.0 - epsilon) {
        float penetration = position.z - (1.0 - epsilon);
        boundaryForce.z -= kBoundary * penetration * penetration;
    }
#endif

    // Add the boundary force
    velocity += boundaryForce * constants.deltaTime;
    // --------------------------------------------------------
    velocitiesOutput[index] = velocity;
}