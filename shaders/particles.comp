#version 450

layout (local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;
layout (constant_id = 1) const int nParticles = 0;
layout (constant_id = 2) const int nTriangles = 150;

layout (push_constant) uniform PushStruct {
    mat4 mvp;
    vec4 pos;
    float dT; // timestep
} p;

layout (binding = 0) buffer Alive {uint gAlive[];};
layout (binding = 1) buffer PosLife {vec4 gPosLife[];};
layout (binding = 2) buffer VelMass {vec4 gVelMass[];};
layout (binding = 3) readonly buffer TriangleSoup {vec4 gTriangleSoup[];};
layout (binding = 4) uniform sampler3D gForceFieldSampler;


shared vec4[gl_WorkGroupSize.x] triangleCache;

float EPSILON = 0.001f;

vec4 cross3(vec4 a, vec4 b) {
    vec4 c;
    c.x = a.y * b.z - b.y * a.z;
    c.y = a.z * b.x - b.z * a.x;
    c.z = a.x * b.y - b.x * a.y;
    c.w = 0.f;
    return c;
}

float dot3(vec4 a, vec4 b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
}

// This function expects two points defining a ray (x0 and x1)
// and three vertices stored in v1, v2, and v3 (the last component is not used)
// it returns true if an intersection is found and sets the isectT and isectN
// with the intersection ray parameter and the normal at the intersection point.
bool LineTriangleIntersection(vec4 x0, vec4 x1, vec4 v1, vec4 v2, vec4 v3, inout float isectT, inout vec4 isectN) {

    vec4 dir = x1 - x0;
    dir.w = 0.f;

    vec4 e1 = v2 - v1;
    vec4 e2 = v3 - v1;
    e1.w = 0.f;
    e2.w = 0.f;

    vec4 s1 = cross3(dir, e2);
    float divisor = dot3(s1, e1);
    if (divisor == 0.f)
    return false;
    float invDivisor = 1.f / divisor;

    // Compute first barycentric coordinate
    vec4 d = x0 - v1;
    float b1 = dot3(d, s1) * invDivisor;
    if (b1 < -EPSILON || b1 > 1.f + EPSILON)
    return false;

    // Compute second barycentric coordinate
    vec4 s2 = cross3(d, e1);
    float b2 = dot3(dir, s2) * invDivisor;
    if (b2 < -EPSILON || b1 + b2 > 1.f + EPSILON)
    return false;

    // Compute _t_ to intersection point
    float t = dot3(e2, s2) * invDivisor;
    if (t < -EPSILON || t > 1.f + EPSILON)
    return false;

    // Store the closest found intersection so far
    isectT = t;
    isectN = cross3(e1, e2);
    isectN = normalize(isectN);
    return true;

}

bool CheckCollisions(vec4 x0, vec4 x1, uint nTriangles, inout float t, inout vec4 n) {

    // Iterate over all triangles caching them in the triangle cache
    bool bHit = false;

/* smarter version */

    uint nProcessed = 0;
    while (nProcessed < nTriangles) {

        // Load triangles to the cache
        if (3 * nProcessed + gl_LocalInvocationID.x < nTriangles * 3)
        triangleCache[gl_LocalInvocationID.x] = gTriangleSoup[nProcessed * 3 + gl_LocalInvocationID.x];

        barrier();

        // Iterate over the cache and check for intersections
        uint v = 0;
        while (nProcessed < nTriangles && v < gl_WorkGroupSize.x) {
            vec4 v1 = triangleCache[v++];
            vec4 v2 = triangleCache[v++];
            vec4 v3 = triangleCache[v++];

            v1.w = v2.w = v3.w = 0.f;

            float isectT = 1e30f;
            vec4 isectN;

            if (LineTriangleIntersection(x0, x1, v1, v2, v3, isectT, isectN)) {
                if (isectT < t) {
                    bHit = true;
                    t = isectT;
                    n = isectN;
                }
            }
            nProcessed++;
        }

        barrier();

    }

    return bHit;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This is the integration kernel. Implement the missing functionality
//
// Input data:
// gAlive         - Field of flag indicating whether the particle with that index is alive (!= 0) or dead (0). You will have to modify this
// gForceField    - 3D texture with the  force field
// sampler        - 3D texture sampler for the force field (see usage below)
// nParticles     - Number of input particles
// nTriangles     - Number of triangles in the scene (for collision detection)
// lTriangleCache - Local memory cache to be used during collision detection for the triangles
// gTriangleSoup  - The triangles in the scene (layout see the description of CheckCollisions())
// gPosLife       - Position (xyz) and remaining lifetime (w) of a particle
// gVelMass       - Velocity vector (xyz) and the mass (w) of a particle
// dT             - The timestep for the integration (the has to be subtracted from the remaining lifetime of each particle)
//
// Output data:
// gAlive   - Updated alive flags
// gPosLife - Updated position and lifetime
// gVelMass - Updated position and mass
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void main() {
    const uint Gid = gl_GlobalInvocationID.x;
    const uint Lid = gl_LocalInvocationID.x;

    if (Gid > nParticles)
    return;
    vec4 gAccel = vec4(0.f, 0.f, -9.81f, 0.f);

    // Verlet Velocity Integration
    vec4 x0 = gPosLife[Gid];
    vec4 v0 = gVelMass[Gid];

    float mass = v0.w;
    float life = x0.w;

    vec3 lookUp = x0.xyz;


    // texture is a built in function
    // it communicates to the driver that we want to sample from
    // the texture. This allows for interpolation
    vec4 F0 = texture(gForceFieldSampler, lookUp);

    vec4 a0 = F0 / mass;
    a0 += gAccel;

    vec4 x1 = x0 + v0 * p.dT + 0.5f * a0 * p.dT * p.dT;

    lookUp = x1.xyz;


    vec4 F1 = texture(gForceFieldSampler, lookUp);
    vec4 a1 = F1 / mass;
    a1 += gAccel;
    vec4 v1 = v0 + 0.5f * (a0 + a1) * p.dT;

    // Check for collisions
    vec4 n;
    float t = 1.f;
    if (CheckCollisions(x0, x1, nTriangles, t, n)) {
        // If there is a collision, reflect the vector direction about n
        x1 = x0 + (x1 - x0) * t;
        x1 += n * EPSILON;

        v1 = (2 * -dot3(v1, n) * n + v1);
        v1 *= 0.7f;
    }

    // Possibly kill the particle
    life -= p.dT;
    uint alive = uint((life > 0.f));
    if (alive == 0)
    x1 = x0;

    x1.w = life;
    v1.w = mass;

    //gPosLife[Gid] = x1;
    //gVelMass[Gid] = v1;

    // Possibly birth new particle
    //v1.w = 0.f;

    uint newBorn = uint(length(v1) > 0.7 && x1.y > 0.15f || alive == 0);
    vec4 v2;
    vec4 x2;
    if (newBorn == 1) {
        v2 = vec4(float((9574 + Gid) % Lid - Lid * 0.5f) / Lid * 2.f,
                  float((4258 + Gid) % Lid - Lid * 0.5f) / Lid * 2.f,
                  float((4458 + Gid) % Lid - Lid * 0.5f) / Lid * 2.f, 0.f);
        v2.w = mass;
        x2 = vec4(0.8f, .8f, .8f,
                  float((2954 + Gid) % Lid - Lid * 0.5f) / Lid * 2.f * 3.f + 1.f);

    }

    if (alive == 0 && newBorn == 1) {
        gAlive[Gid] = newBorn;
        gPosLife[Gid] = x2;
        gVelMass[Gid] = v2;

        gAlive[Gid + nParticles] = alive;
        gPosLife[Gid + nParticles] = x1;
        gVelMass[Gid + nParticles] = v1;
        return;
    } else {
        gAlive[Gid] = alive;
        gPosLife[Gid] = x1;
        gVelMass[Gid] = v1;

        gAlive[Gid + nParticles] = newBorn;
        gPosLife[Gid + nParticles] = x2;
        gVelMass[Gid + nParticles] = v2;
        return;
    }
}